@model CLD111POETerm1ST10484249.Repository.Models.Venue
@using CLD111POETerm1ST10484249.Repository.Models

@{
    ViewData["Title"] = "Details";
}

<section id="about">
    <div class="container">
        <div class="row">
        </div>
    </div>
</section>

<main id="main">

    <section id="venue" class="wow fadeInUp">

        <div class="container-fluid">
            <div class="section-header">
                <h2>Venue Details</h2>
            </div>

            <div class="row no-gutters">
                <div class="col-lg-6 venue-map">
                    <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d135920.3819129637!2d27.95762382119889!3d-26.171343976676724!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x1e950c68f0406a51%3A0x238ac9d9b1d34041!2sJohannesburg!5e1!3m2!1sen!2sza!4v1742853692212!5m2!1sen!2sza"
                            style="border:0" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>
                </div>

                <div class="col-lg-6 venue-info">
                    <div class="row justify-content-center">
                        <div class="col-11 col-lg-8">
                            <h3>@Model.VenueName</h3>
                            <div class="row">
                                <div class="col-md-3">
                                    <p><i class="fa fa-users"></i> @Model.Capacity Seaters</p>
                                </div>
                                <div class="col-md-3">
                                    <p><i class="fa fa-map-marker"></i> @Model.Location</p>
                                </div>
                                <div class="col-md-3">
                                    <p>
                                        <i class="fa @(Model.VenueStatus.StatusName == "Available" ? "fa-check-circle text-success" : "fa-times-circle text-danger")"></i>
                                        @Model.VenueStatus.StatusName
                                    </p>
                                </div>
                                <div class="col-md-3">
                                 <a href="#" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#bookingModal">Book Now</a>
                                </div>
                            </div>
                            <hr />
                            <p>@Model.Description</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="container-fluid venue-gallery-container">
            <div class="row no-gutters">
                <div class="col-lg-3 col-md-4">
                    <div class="venue-gallery">
                        <a href="@Model.ImageUrl" class="venobox" data-gall="venue-gallery">
                            <img src="@Model.ImageUrl" class="img-fluid rounded" alt="Venue Image">
                        </a>
                    </div>
                </div>

                @if (Model?.VeneuImages != null && Model.VeneuImages.Any())
                {
                    foreach (var image in Model.VeneuImages.Where(p => p.VenueId == Model.VenueId))
                    {
                        <div class="col-lg-3 col-md-4">
                            <div class="venue-gallery">
                                <a href="@image.ImageUrl" class="venobox" data-gall="venue-gallery">
                                    <img src="@image.ImageUrl" class="img-fluid rounded" alt="Venue Image">
                                </a>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p class="text-muted">No images available for this venue.</p>
                }
            </div>
        </div>

    </section>

</main>

<div class="modal fade" id="bookingModal" tabindex="-1" aria-labelledby="bookingModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addVenueModalLabel">Book this Venue</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-action="Create" asp-controller="Bookings" enctype="multipart/form-data">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    <input type="hidden" name="VenueId" value="@Model.VenueId" />

                    <div id="conflictList">
                       
                    </div>

                    <div class="form-group">
                        <label class="control-label">Event Start Date</label>
                        <input type="datetime-local" name="EventStartDate" id="EventStartDate" required class="form-control" onchange="checkDateAvailability()" />
                        <span id="startDateError" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label class="control-label">Event End Date</label>
                        <input type="datetime-local" name="EventEndDate" id="EventEndDate" required class="form-control" onchange="checkDateAvailability()" />
                        <span id="endDateError" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label class="control-label">Event Name</label>
                        <input name="EventName" required class="form-control" />
                    </div>

                    <div class="form-group">
                        <label class="control-label">Event Type</label>
                        <select name="EventTypeId" class="form-control" asp-items="ViewBag.EventTypeId"></select>
                    </div>

                    <div class="form-group">
                        <label class="control-label">Description</label>
                        <textarea name="Description" required class="form-control"></textarea>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button id="bookingBtn" type="submit" class="btn btn-primary">Book</button>
                    </div>
                </form>
            </div>

        </div>
    </div>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        function checkDateAvailability() {
            var startDate = document.getElementById('EventStartDate').value;
            var endDate = document.getElementById('EventEndDate').value;
            var venueId = document.querySelector('input[name="VenueId"]').value;

            if (startDate && endDate) {
                var start = new Date(startDate);
                var end = new Date(endDate);

                if (end <= start) {
                    document.getElementById('endDateError').textContent = 'End date must be after start date';
                    return;
                }

                fetch(`/Events/CheckDateAvailability?startDate=${start.toISOString()}&endDate=${end.toISOString()}&venueId=${venueId}`)
                    .then(response => response.json())
                    .then(data => {
                        if (!data.isAvailable) {
                            var conflictList = document.getElementById('conflictList');
                            conflictList.innerHTML = ' <p>The selected dates conflict with the following events:</p> <ul class="list-group">';
                            data.conflictingEvents.forEach(event => {
                                conflictList.innerHTML += `
                                    <li class="list-group-item">
                                        <strong>${event.eventName}</strong><br>
                                        Start: ${new Date(event.eventStartDate).toLocaleString()}<br>
                                        End: ${new Date(event.eventEndDate).toLocaleString()}
                                    </li>`;
                            });
                            conflictList.innerHTML += '</ul><br>';

                            document.getElementById('startDateError').textContent = 'Selected dates conflict with existing events';
                            document.getElementById('endDateError').textContent = 'Selected dates conflict with existing events';
                            document.getElementById('bookingBtn').disabled = true;
                            document.getElementById('conflictList').style.display = 'block';
                           

                        } else {
                            document.getElementById('startDateError').textContent = '';
                            document.getElementById('endDateError').textContent = '';
                            document.getElementById('bookingBtn').disabled = false;
                            document.getElementById('conflictList').style.display = 'none';

                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        document.getElementById('startDateError').textContent = 'Error checking date availability';
                    });
            }
        }
    </script>

    <script>
        document.getElementById('EventEndDate').addEventListener('change', function () {
            var startDate = new Date(document.getElementById('EventStartDate').value);
            var endDate = new Date(this.value);

            if (endDate <= startDate) {
                alert("End date must be later than start date.");
                this.value = ''; 
            }
        });
    </script>

}
